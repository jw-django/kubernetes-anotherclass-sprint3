pipeline {
    agent any

    tools {
        gradle 'gradle-7.6.1'
        jdk 'jdk-17'
    }

    environment {
        // 본인의 username으로 하실 분은 수정해주세요.
        DOCKERHUB_USERNAME = 'devjw'
        GITHUB_URL = 'https://github.com/jw-django/kubernetes-anotherclass-sprint3.git'

        // 실습 넘버링
        CLASS_NUM = '3221'
        // 버전
        APP_VERSION = '3.0.0'
    }
    
    stages {
        stage('소스파일 체크아웃') {
            steps {
                // 본인의 username으로 하실 분은 수정해주세요.
                git branch: "${APP_VERSION}", url: 'https://github.com/jw-django/kubernetes-anotherclass-api-tester.git'
            }
        }

        stage('소스 빌드') {
            steps {
                // 755권한 필요 (윈도우에서 Git으로 소스 업로드시 권한은 644)
                sh "chmod +x ./gradlew"
                sh "gradle clean build -x test"
            }
        }

        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                    extensions: [[$class: 'SparseCheckoutPaths',
                    sparseCheckoutPaths: [[path: "/${CLASS_NUM}"]]]],
					userRemoteConfigs: [[url: "${GITHUB_URL}"]])
            }
        }

    	stage('컨테이너 빌드') {
            steps {
		    	// jar 파일 복사
	                sh "cp ./build/libs/app-${APP_VERSION}-SNAPSHOT.jar ./${CLASS_NUM}/build/docker/app-${APP_VERSION}-SNAPSHOT.jar"
	
		    	withCredentials([usernamePassword(credentialsId: 'docker_password', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
	                    sh "echo " + '${PASSWORD}' + " | docker login -u " + '${USERNAME}' + " --password-stdin"
	                }
			// 도커 빌드
			sh "docker build -t ${DOCKERHUB_USERNAME}/api-tester:${APP_VERSION} ./${CLASS_NUM}/build/docker"
			
		    	// docker hub push
		    	sh "docker push ${DOCKERHUB_USERNAME}/api-tester:${APP_VERSION}"
            }
		
	    post {
                always {
                    sh "docker logout"
                }
            }
        }

        stage('쿠버네티스 배포') {
            steps {
		    withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/namespace.yaml --kubeconfig " + '${KUBECONFIG}'
		    	sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/configmap.yaml --kubeconfig " + '${KUBECONFIG}'
		    	sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/secret.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/pod.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/deployment.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/service-clusterip.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/service-loadbalancer.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/service-externalips.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/service-nodeport.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/db-service-externalname.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/db-service-headless.yaml --kubeconfig " + '${KUBECONFIG}'
	                sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/db-statefulset.yaml --kubeconfig " + '${KUBECONFIG}'
		}
		
            }
        }

    }
}
